import logging
from contextlib import suppress
from math import fabs

from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove
from aiogram.utils.exceptions import (MessageToDeleteNotFound,
                                      MessageToEditNotFound)

from app.__main__ import bot

from ..database.base import Item, Shop, User
from ..handlers.user_handlers import user_inventory
from ..helpers.dev_text import gear_info_text
from ..helpers.keyboards import (CONFIRM_Kb, CRAFT_Kb, EQUIPMENT_Kb, IDLE_Kb,
                                 UNDRESS_Kb)
from ..utils.states import MainStates


async def gear_info_check(m: Message):
    try:
        gear = await Item.get(int(m.text[1:]))
        if gear:
            await m.answer(text=gear_info_text(gear))
        else:
            with suppress(MessageToDeleteNotFound):
                await m.delete()
            await m.answer('‚ùó –¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç') 
    except ValueError:
        return
    


async def gear_equip(c: CallbackQuery, user: User):
    if c.data[6:] == 'back':
        with suppress(MessageToDeleteNotFound):
            await c.message.delete()
        await user_inventory(c.message, user)
    else:
        gear = await Item.get(int(c.data[6:]))
        if gear.id in user.inventory:
            if getattr(user, gear.item_class) is None:
                user.inventory.remove(gear.id)
                await user.update(inventory=user.inventory, defence=user.defence + gear.defence_boost,
                                max_defence=user.max_defence + gear.defence_boost, 
                                damage=user.damage + gear.attack_boost).apply()
                
                await user.update(weapon=gear.id).apply() if gear.item_class == 'weapon' else await user.update(armor=gear.id).apply()
                    
                await c.message.delete()
                await c.message.answer(text="‚ùï –í—ã –Ω–∞–¥–µ–ª–∏ —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É", reply_markup=IDLE_Kb())
            else:
                await c.message.delete()
                await c.message.answer(text="‚ùó –°–Ω–∞—á–∞–ª–∞ —Å–Ω–∏–º–∏—Ç–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É", reply_markup=EQUIPMENT_Kb())
        else:
            await c.message.delete()
            await c.message.answer(text="‚ùó –£ –≤–∞—Å –Ω–µ—Ç—É —Ç–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞", reply_markup=IDLE_Kb())
    


async def gear_unequip(m: Message, user: User):
    if (user.weapon or user.armor) != None:
        eq = [user.weapon, user.armor]
        data = []
        for i in range(len(eq)):
            if eq[i] != None:
                gear = await Item.get(eq[i])
                data.extend([gear.name, gear.id])
            else:
                data.extend(['- –ü—É—Å—Ç–æ -', 'empty'])
        await m.answer('‚ùî –í—ã–±–µ—Ä–∏ –∫–∞–∫—É—é —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É —Å–Ω–∏–º–∞—Ç—å:',
                       reply_markup=UNDRESS_Kb(data))
    else:
        await m.answer('‚ùó –£ —Ç–µ–±—è –Ω–µ—Ç—É —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏', reply_markup=IDLE_Kb())


async def gear_unequip_query(c: CallbackQuery, user: User):
    gear = await Item.get(int(c.data[8:]))
    # user.weapon => Common Sword (example)
    if gear:
        user.inventory.append(gear.id)
        await user.update(defence=user.defence - gear.defence_boost if user.defence - gear.defence_boost >= 0 else 0, 
                          max_defence=user.max_defence - gear.defence_boost,
                          damage=user.damage - gear.attack_boost, inventory=user.inventory).apply()
        await user.update(weapon=None).apply() if gear.item_class == 'weapon' else await user.update(armor=None).apply()

        with suppress(MessageToDeleteNotFound):
            await c.message.delete()
        await c.message.answer(f"‚ùï –í—ã —Å–Ω—è–ª–∏ \"{gear.name}\"", reply_markup=IDLE_Kb())
    else:
        with suppress(MessageToDeleteNotFound):
            await c.message.delete()
        await c.message.answer('‚ùó –£ —Ç–µ–±—è –Ω–µ—Ç—É —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏', reply_markup=IDLE_Kb())


async def gear_craft(m: Message, user: User):
    raw = []
    if user.inventory:
        inv = dict((x, int(user.inventory.count(x) / 2)) for x in set(user.inventory) if user.inventory.count(x) != 1)
        if inv:
            for x, y in inv.items():
                raw_items = await Item.get(int(x))
                if raw_items:
                    for _ in range(y):
                        raw.append(raw_items)
            print(inv, '|', raw_items, '|', raw)
            await m.answer(text='üß≥‚ùï –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫—É—é –ø–∞—Ä—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∫—Ä–∞—Ñ—Ç–∏—Ç—å:', reply_markup=CRAFT_Kb(raw))
        else:
            await m.answer(text='‚ùó –£ –≤–∞—Å –Ω–µ—Ç—É –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤', reply_markup=IDLE_Kb())
    else:
        await m.answer(text='‚ùó –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç', reply_markup=IDLE_Kb())


async def gear_craft_query(c: CallbackQuery, user: User):
    curr_gear = await Item.get(int(c.data[6:]))
    if curr_gear:
        for _ in range(2):
            if curr_gear.id in user.inventory:
                user.inventory.remove(curr_gear.id)
            else:
                with suppress(MessageToDeleteNotFound):
                    await c.message.delete()
                await c.message.answer('‚ùï –í –≤–∞—à–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –±–æ–ª—å—à–µ –Ω–µ—Ç—É —Ç–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞', reply_markup=IDLE_Kb())
                return

        craft_result = await Item.get(curr_gear.id + 1)
        if curr_gear.item_class == craft_result.item_class:
            user.inventory.append(craft_result.id)
            await user.update(inventory=user.inventory).apply()
            with suppress(MessageToDeleteNotFound):
                await c.message.delete()
            await c.message.answer(
                text=f"‚ùï –í—ã —É—Å–ø–µ—à–Ω–æ —Å–∫—Ä–∞—Ñ—Ç–∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç:\n\n{gear_info_text(craft_result)}",
                reply_markup=IDLE_Kb())
        else:
            with suppress(MessageToDeleteNotFound):
                await c.message.delete()
            await c.message.answer('‚ùó –ü—Ä–µ–¥–º–µ—Ç—ã —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞', reply_markup=IDLE_Kb())

    else:
        with suppress(MessageToDeleteNotFound):
            await c.message.delete()
        await c.message.answer('<b>Error:</b> Broken item (–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π)', reply_markup=IDLE_Kb())
        raise NameError("Broken item")


async def gear_sell_confirm(c: CallbackQuery, user: User):
    await c.message.edit_text(f'üí∏ <b>–ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–µ–¥–º–µ—Ç–∞.</b>\n\n<i>  - –ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏, –±–µ–∑ —É—á–∞—Å—Ç–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. –°–æ–≤–µ—Ç—É–µ–º —Å—Ç–∞–≤–∏—Ç—å —Ä–∞–∑—É–º–Ω—É—é —Ü–µ–Ω—É\n\n'
                              f'  - –ü—Ä–æ–¥–∞–≤–∞—è –ø—Ä–µ–¥–º–µ—Ç –≤—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–∏–±—ã–ª—å <u>–º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ</u>! –í—ã –ª–∏—à—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ –µ–≥–æ \"–≤ –æ—á–µ—Ä–µ–¥—å\" –≥–¥–µ –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∫—É–ø–∏—Ç—å –µ–≥–æ. </i>',
                              reply_markup=CONFIRM_Kb(text=('üí∏ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'üîö –û—Ç–º–µ–Ω–∏—Ç—å'), callback=f'sell_register_{c.data[5:]}'))



async def gear_sell_register(c: CallbackQuery, user: User, state: FSMContext):
    item = await Item.get(int(c.data[14:]))
    if item: 
        await MainStates.selling.set()
        with suppress(MessageToDeleteNotFound):
            await c.message.delete()
        trash = await c.message.answer('‚ùî <b>–ö–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç:</b>\n\n<i>  - –ù–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ –≤—Å—ë –ø—Ä–æ—Å—Ç–æ –≤–µ–¥—å –ë–∞—à–Ω—è –¥–µ–ª–∞–µ—Ç –ø–æ—á—Ç–∏ –≤—Å—ë –∑–∞ –≤–∞—Å, '
                                       '–≤–∞–º –∂–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É <u>—Å—Ç–æ–∏–º–æ—Å—Ç—å</u> –ø—Ä–µ–¥–º–µ—Ç–∞</i>. \n\n–ü—Ä–∏–º–µ—Ä: '
                                       '\"999\"', reply_markup=ReplyKeyboardRemove())
        async with state.proxy() as data:
            data['sell_item'] = item
            data['trash'] = trash
    else:
        with suppress(MessageToDeleteNotFound):
            await c.message.delete()
        await c.message.answer('<b>Error:</b> Broken item (–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π)', reply_markup=IDLE_Kb())
        raise NameError("Broken item")


async def gear_sell_registered(m: Message, user: User, state: FSMContext):
    async with state.proxy() as data:
        item = data['sell_item']
        trash = data['trash']
    try:
        request = await Shop.create(item_id=item.id, item=item.name, rank=item.rank, price=int(fabs(int(m.text))), user_id=user.id)
        # removing from the inventory
        user.inventory.remove(request.item_id)
        await m.delete()
        with suppress(MessageToDeleteNotFound):
            await trash.delete()
            await m.answer(text=f'‚ùï –õ–æ—Ç ‚Ññ{request.id} –Ω–∞ –ø—Ä–æ–¥–∞–∂—É —Å–æ–∑–¥–∞–Ω:\n\n{request.item}: /{request.item_id}\n'
                                f'üèÜ –†–∞–Ω–≥ –ø—Ä–µ–¥–º–µ—Ç–∞: {request.rank}\nüí∏ –¶–µ–Ω–∞: {request.price}', reply_markup=IDLE_Kb())
        await user.update(inventory=user.inventory).apply()
    except (ValueError):
        await m.delete()
        with suppress(MessageToDeleteNotFound):
            await trash.delete()
            await m.answer(text='‚ùóÔ∏è –í—ã –Ω–µ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ.', reply_markup=IDLE_Kb())
    finally:
        await state.reset_data()
        await state.reset_state()
